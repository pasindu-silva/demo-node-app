name: Deploy to AWS EC2

on:
  workflow_dispatch:  # Allows manual triggering of the workflow

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Extract the GitHub Release Tag
      - name: Get the latest tag
        id: get_latest_tag
        run: |
          # Fetch all tags
          git fetch --tags
          
          # Find the latest tag on the current branch
          # This command finds the latest tag reachable from the current commit
          TAG=$(git describe --tags --abbrev=0 $(git rev-list --tags --max-count=1))
          echo "Latest tag: $TAG"

          # If no tag is found, set a default value or handle it appropriately
          if [ -z "$TAG" ]; then
            echo "No tags found, setting default tag to 'latest'"
            TAG="latest"
          fi
          
          echo "TAG=$TAG" >> $GITHUB_ENV
          
      # Step 2: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 3: Build the Docker image
      - name: Build Docker image
        run: |
          DOCKER_REPO=${{ secrets.DOCKERHUB_USERNAME }}/action-test-node-app
          echo "Building Docker image with repo: $DOCKER_REPO"
          docker build -t $DOCKER_REPO:${{ env.TAG }} -t $DOCKER_REPO:latest .

      # Step 4: Push the Docker image to Docker Hub
      - name: Push Docker image to Docker Hub
        run: |
          DOCKER_REPO=${{ secrets.DOCKERHUB_USERNAME }}/action-test-node-app

          echo "Pushing Docker image with repo: $DOCKER_REPO and tag: $TAG"
          docker push $DOCKER_REPO:${{ env.TAG }}
          
          echo "Pushing Docker image with repo: $DOCKER_REPO and tag: latest"
          docker push $DOCKER_REPO:latest

      # Step 5: Deploy to EC2
      - name: Deploy to EC2
        env:
          DOCKER_REPO: ${{ secrets.DOCKERHUB_USERNAME }}/action-test-node-app
          DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/action-test-node-app:${{ env.TAG }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          ENV_FILE_BASE64: ${{ secrets.ENV_FILE_BASE64 }}
        run: |
          # Debugging: Print Docker variables
          echo "Docker repository: $DOCKER_REPO"
          echo "Docker image to deploy: $DOCKER_IMAGE"

          # Save the private key for SSH access
          echo "${{ secrets.EC2_SSH_KEY }}" > ec2_key.pem
          chmod 600 ec2_key.pem

          # SSH into EC2 and deploy
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem $EC2_USER@$EC2_HOST << EOF

            # Decode the .env file from Base64 and save it
            echo "$ENV_FILE_BASE64" | base64 --decode > .env
            
            # Debugging: Print Docker image value inside SSH session
            echo "Docker image inside EC2: $DOCKER_IMAGE"

            # Log in to Docker Hub on EC2 instance
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | sudo docker login --username ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

            # Validate Docker image format
            if [[ "$DOCKER_IMAGE" =~ ^[a-zA-Z0-9._-]+/[a-zA-Z0-9._-]+:[a-zA-Z0-9._-]+$ ]]; then
              echo "Valid Docker image format: $DOCKER_IMAGE"
            else
              echo "Error: Invalid Docker image format: $DOCKER_IMAGE"
              exit 1
            fi

            # Pull the latest Docker image
            sudo docker pull $DOCKER_IMAGE

            # Check if the container exists and is running, then stop and remove it
            if sudo docker ps -a --format '{{.Names}}' | grep -Eq "^demo-backend\$"; then
              echo "Stopping and removing existing container..."
              sudo docker stop demo-backend || true
              sudo docker rm demo-backend || true
            else
              echo "Container demo-backend does not exist, skipping stop and remove steps."
            fi

            # Run the new Docker container
            sudo docker run -d --name demo-backend --restart always --env-file .env -p 8080:8080 $DOCKER_IMAGE
          EOF

      # Cleanup
      - name: Remove SSH key
        run: rm -f ec2_key.pem
