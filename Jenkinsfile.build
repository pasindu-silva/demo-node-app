pipeline {
    agent any

    environment {
        DOCKER_HUB_REPO = 'pasindusilvartc/demo-node-app-repo'
        DOCKER_HUB_CREDENTIALS_ID = 'demoapp-dockerhub-credentials-id'
        BUILD_PIPELINE_NAME = 'demoapp-deploy-prod-pipeline'
        GITHUB_RELEASE_TAG = "${env.GIT_TAG_NAME}"
        GITHUB_REPO = 'pasindu-silva/demo-node-app'
        GITHUB_CREDENTIALS_ID = 'demoapp-github-credentials-id'
    }

    stages {
        stage('Get GitHub Release Tag') {
            steps {
                script {
                    // Helper function to call GitHub API
                    def callGitHubApi = { credentialsId, url ->
                        withCredentials([string(credentialsId: credentialsId, variable: 'GITHUB_TOKEN')]) {
                            def response = sh(script: "curl -H 'Authorization: token ${GITHUB_TOKEN}' ${url}", returnStdout: true).trim()
                            return response
                        }
                    }

                    // Get the name of the branch or tag being built
                    def branchOrTag = env.BRANCH_NAME
                    echo "Building for branch/tag: ${branchOrTag}"

                    // Call the GitHub API to get the release information for the tag
                    def response = callGitHubApi("${GITHUB_CREDENTIALS_ID}", "https://api.github.com/repos/${GITHUB_REPO}/releases/tags/${branchOrTag}")
                    def json = readJSON text: response
                    def releaseTag = json.tag_name
                    echo "GitHub Release Tag: ${releaseTag}"
                }
            }
        }

        stage('Build docker image') {
            steps {
                script {
                    echo "${GITHUB_RELEASE_TAG}"
                    dockerImage = docker.build("${DOCKER_HUB_REPO}:${env.BUILD_ID}")
                }
            }
        }
        
        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', "${DOCKER_HUB_CREDENTIALS_ID}") {
                        dockerImage.push()
                    }
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        success {
            // Trigger the deploy pipeline
            build job: "${BUILD_PIPELINE_NAME}", parameters: [string(name: 'BUILD_ID', value: "${env.BUILD_ID}")]
        }
    }
}

def githubApiCall(credentialsId, url) {
    withCredentials([string(credentialsId: credentialsId, variable: 'GITHUB_TOKEN')]) {
        def response = sh(script: "curl -H 'Authorization: token ${GITHUB_TOKEN}' ${url}", returnStdout: true).trim()
        return response
    }
}
