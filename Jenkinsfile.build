pipeline {
    agent any

    environment {
        DOCKER_HUB_REPO = 'pasindusilvartc/demo-node-app-repo'
        DOCKER_HUB_CREDENTIALS_ID = 'demoapp-dockerhub-credentials-id'
        BUILD_PIPELINE_NAME = 'demoapp-deploy-prod-pipeline'
        GITHUB_RELEASE_TAG = "${env.GIT_TAG_NAME}"
        GITHUB_REPO = 'pasindu-silva/demo-node-app'
        GITHUB_CREDENTIALS_ID = 'demoapp-github-credentials-id'
    }

    stages {
         stage('Checkout') {
            steps {
                // Checkout the code
                checkout scm
            }
        }

        stage('Get GitHub Release Tag') {
            steps {
                script {
                    // Fetch all tags from the remote
                    sh 'git fetch --tags'

                    // Get the latest tag associated with the current commit
                    env.GITHUB_RELEASE_TAG = sh(
                        script: "git tag --points-at HEAD",
                        returnStdout: true
                    ).trim()

                    if (!env.GITHUB_RELEASE_TAG) {
                        // If no tag is found, set a default value or handle it accordingly
                        env.GITHUB_RELEASE_TAG = 'no-tag-found'
                    }

                    // Print the tag
                    echo "GitHub Release Tag: ${env.GITHUB_RELEASE_TAG}"
                }
            }
        }
        
        stage('Build docker image') {
            steps {
                script {
                    echo "${GITHUB_RELEASE_TAG}"
                    dockerImage = docker.build("${DOCKER_HUB_REPO}:${env.BUILD_ID}")
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', "${DOCKER_HUB_CREDENTIALS_ID}") {
                        dockerImage.push()
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            // Trigger the deploy pipeline
            build job: "${BUILD_PIPELINE_NAME}", parameters: [string(name: 'BUILD_ID', value: "${env.BUILD_ID}")]
        }
    }
}

