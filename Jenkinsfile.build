/*
* Feel free to use this template and update it to meet your unique requirements ðŸ˜Š
* Also feel free to make any suggestions to improve these template files ðŸ™Œ
*/

pipeline {
    agent any

    parameters {
        /*
        * Using the "Git Parameter Plug-In"
        * To fetch the Release Tags from the GitHub repository
        */
        gitParameter(name: 'GIT_TAG',
            type: 'PT_TAG',
            defaultValue: 'latest',
            description: 'Select a Git Release Tag to build'
        )
    }

    environment {
        // Update with your GitHub repo path
        GITHUB_REPO = 'rootcodelabs/rtc-connect'

        // Update with the credentials id you used to store the GitHub credentials in the Jenkins
        GITHUB_CREDENTIALS_ID = 'demoapp-github-credentials-id'

        // Update with your dev branch name, required when creating the build tag for the dev branch
        DEV_BRANCH = 'origin/develop'

        // Update with your DockerHub repo path
        DOCKER_HUB_REPO = 'rootcodelabs/rtc-connect' 

        // Update with the credentials id you used to store the DockerHub credentials in the Jenkins
        DOCKER_HUB_CREDENTIALS_ID = 'rtc-dockerhub-credentials-id' 

        // Update with the name of your deployment pipeline. This is required to trigger the deployment pipeline after the build
        DEPLOY_PIPELINE_NAME = 'rtc-connect-deploy-pipeline'

        // Variables that will be updated later in the process
        // Keep the following empty at the point of initialization
        GITHUB_BRANCH = ''
        TAG = ''
    }

    stages {
        stage('Format the branch name') {
            steps { 
                script {
                    GITHUB_BRANCH = 'origin/' + env.GITHUB_BRANCH
                }
            }
        }

        stage('ðŸ”— Prepare TAG') {
            steps {
                script {
                    if (GITHUB_BRANCH == DEV_BRANCH) {
                        TAG = 'dev'
                    }else {
                        TAG = params.GIT_TAG
                    }
                }
            }
        }

        stage('ðŸ”§ Build docker image') {
            steps {
                script {
                    if (!TAG) {
                        error 'TAG is not available. Failing the pipeline.'
                    }
                    dockerImage = docker.build("${DOCKER_HUB_REPO}:${TAG}")
                }
            }
        }

        stage('ðŸ“¦ Push Docker Image to Docker Hub') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', "${DOCKER_HUB_CREDENTIALS_ID}") {
                        // Push versioned tag
                        dockerImage.push("${TAG}")
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            script {
                def deployEnv = getDeploymentEnvByBranch(GITHUB_BRANCH)

                echo 'Trigerring the deploy pipeline'
                build job: "${DEPLOY_PIPELINE_NAME}", parameters: [
                    string(name: 'GIT_TAG', value: "${TAG}"),
                    string(name: 'DEPLOY_ENV', value: "${deployEnv}")
                ]
            }
        }
    }
}

/*
* Function to return the deployment env value based on the branch name 
* Update the following function body to meet your branch names and environment names
*/
def getDeploymentEnvByBranch( branch_name ) {
    switch (branch_name) {
        case 'origin/main':
            return 'main'
        case 'origin/develop':
            return 'dev'
        default:
            error 'Invalid branch name to generate the deployment env'
    }
}
